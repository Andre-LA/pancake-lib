
## local metafields = require 'plib/meta/metafields'

require 'plib/meta/concepts'
require 'plib/meta/ast'
require 'plib/meta/asserts'
require 'plib/core/sumtype'



## if TEST then
	## require('plib.meta.unit_test')(_ENV)

	require 'io'
	require 'plib/meta/unit_test'
## end



##[[

option_concept = generic(memoize(function(T) 
	return concept(function(attr)
		if not attr.type.is_option then
			return false, 
				string.format("the type isn't an option (got: %s)", attr.type)
		end

		local ok, err = type_is(attr.type.subtype, T)
		if not ok then
			return false, 
				string.format("subtype invalid (got: %s, want: %s, type error: %s)",
					attr.type.subtype, T, err)
		end

		return true
	end)
end))

]]



## local make_option
## make_option = generalize(function(T)

	local T = #[T]#
	local option = #[make_option]# 

	local optionT = @sumtype(#['option(' .. tostring(T) .. ")"]#, record {
		some: T,
		none: niltype
	})

	## optionT.value.is_option = true
	## optionT.value.subtype = T

	## if T ~= primtypes.niltype then

		## metafields.rename_method(optionT.value, 'unwrap_some', 'unwrap')
		## metafields.rename_method(optionT.value, 'unwrap_some_ptr', 'unwrap_ptr')


		function optionT.as_ptr(self: *optionT) <polymorphic>
			if self:is_some() then
				return (@option(*T)).some(self:unwrap_ptr())
			else
				return (@option(*T)).none()
			end
		end

		function optionT.expect(self: optionT, m: stringview): T
			assert(self:is_some(), m)
			return self:unwrap()
		end

		function optionT.unwrap_or(self: optionT, v: T): T
			if self:is_some() then
				return self:unwrap()
			else
				return v
			end
		end

		function optionT.unwrap_or_else(self: optionT, f: functor(T)): T
			if self:is_some() then
				return self:unwrap()
			else
				return f()
			end
		end

		function optionT.map(self: optionT, f: functor(auto, T))
			local U = #[f.type.rettypes[1]]#
			if self:is_some() then
				return (@option(U)).some(f(self:unwrap()))
			else
				return (@option(U)).none()
			end
		end

		function optionT.map_or(self: optionT, v: auto, f: functor(auto, T))
			## concept_assert( functor_concept(v.type, T), f )

			if self:is_some() then
				return f(self:unwrap())
			else
				return v
			end
		end

		function optionT.map_or_else(self: optionT, fd: functor(auto), f: functor(auto, T))
			## concept_assert( functor_concept(fd.type.rettypes[1], T), f )

			if self:is_some() then
				return f(self:unwrap())
			else
				return fd()
			end
		end

		function optionT.and_(self: optionT, o: auto)
			local U = #[type_assert( option_concept(primtypes.auto), o ).subtype]#
			## print("and_", U)

			if self:is_some() then
				return o
			else
				return (@option(U)).none()
			end
		end

		function optionT.and_then(self: optionT, f: functor(auto, T))
			local U = #[
				concept_assert(
					functor_concept(option_concept(primtypes.auto), T), f
				).rettypes[1].subtype
			]#
			## print("and_then", U)

			if self:is_some() then
				return f(self:unwrap())
			else
				return (@option(U)).none()
			end
		end



		function optionT.or_(self: optionT, o: optionT)
			if self:is_some() then
				return self
			else
				return o
			end
		end

		function optionT.or_else(self: optionT, f: functor(optionT))
			if self:is_some() then
				return self
			else
				return f()
			end
		end

		function optionT.xor(self: optionT, o: optionT)
			if self:is_some() and o:is_none() then
				return self
			elseif self:is_none() and o:is_none() then
				return o
			else
				return optionT.none()
			end
		end

		function optionT.get_or_insert(self: *optionT, v: T): *T
			if self:is_some() then
				return self:unwrap_ptr()
			else
				self:morph_into_some(v)
				return self:unwrap_ptr()
			end
		end

		function optionT.get_or_insert_with(self: *optionT, f: functor(T)): *T
			if self:is_some() then
				return self:unwrap_ptr()
			else
				self:morph_into_some(v)
				return self:unwrap_ptr()
			end
		end

		function optionT.take(self: *optionT): optionT
			if self:is_some() then
				local d = self:unwrap()
				self:morph_into_none()
				return optionT.some(d)
			else
				return optionT.none()
			end
		end

		function optionT.replace(self: *optionT, v: T): optionT
			if self:is_some() then
				local old = optionT.some(self:unwrap())
				self:morph_into_some(v)
				return old
			else
				self:morph_into_some(v)
				return optionT.none()
			end
		end


		##[[

		local convert_concept = concept(function(t) 
			if t.type.is_option then
				if t.type.subtype == primtypes.niltype then
					return true
				else
					return T:is_convertible_from_type(t.type.subtype)
				end
			end

			return T:is_convertible_from_type(t.type)
		end)

		]]

		function optionT.__convert(n: #[convert_concept]#)
			## if n.type.is_option then
				## if n.type.subtype == primtypes.niltype then
					return optionT.none()
				## else
					if n:is_some() then
						return optionT.some(n:unwrap())
					else
						return optionT.none()
					end
				## end
			## else
				return optionT.some(n)
			## end
		end

	## end


	## return optionT
## end)


global option = #[make_option]#

global function Some(v: auto)
	local T = #[v.type]#
	return (@option(T)).some(v)
end

global function None(): option(niltype)
	return (@option(niltype)).none()
end



## if TEST then

	## begin_test_suite 'plib/core/option'

		local x: option(integer) = Some(42_i)
		local y: option(integer) = None()

		## begin_test 'is_some/is_none'

			passert(x:is_some())
			passert(y:is_none())

		## begin_test 'expect'

			passert(x:expect("work") == 42)
			--passert(y:expect("panic")) -- crashes, OK

		## begin_test 'unwrap'

			passert(x:unwrap() == 42)
			--passert(y:unwrap()) -- crashes, OK

		## begin_test 'unwrap_or'

			passert(x:unwrap_or(24) == 42)
			passert(y:unwrap_or(24) == 24)

		## begin_test 'unwrap_or_else'

			local function f0(): integer
				return 24
			end

			passert(x:unwrap_or_else(f0) == 42)
			passert(y:unwrap_or_else(f0) == 24)

		## begin_test 'map'

			local function f1(v: integer): number
				return (@number)(v * 2)
			end

			passert(x:map(f1):unwrap() == 84)
			passert(y:map(f1):is_none())

		## begin_test 'map_or'

			local function f2(v: integer): integer
				return v * 2
			end

			passert(x:map_or(24, f2) == 84)
			passert(y:map_or(24, f2) == 24)

		## begin_test 'map_or_else'

			local function f3_0(): integer
				return 24
			end

			local function f3_1(v: integer): integer
				return v - 2
			end

			passert(x:map_or_else(f3_0, f3_1) == 40)
			passert(y:map_or_else(f3_0, f3_1) == 24)

		## begin_test 'and_'

			local t: option(integer) = x:and_(y)

			passert(t:is_none())

		## begin_test 'and_then'

			local function f4(v: integer): option(number)
				return Some(v*10_n)
			end

			passert(x:and_then(f4):unwrap() == 420)
			passert(y:and_then(f4):is_none() == true)

		## begin_test 'or_'

			passert(x:or_(y):unwrap() == 42)

		## begin_test 'or_else'

			local function f5(): option(integer)
				return Some(10_i)
			end

			passert(x:or_else(f5):unwrap() == 42)
			passert(y:or_else(f5):unwrap() == 10)

		## begin_test 'get_or_insert'

			passert($x:get_or_insert(10) == 42)
			passert($y:get_or_insert(10) == 10)

		## begin_test 'take'

			passert(y:take():unwrap() == 10)
			passert(y:take():is_none())

		## begin_test 'replace'

			passert(x:replace(10):unwrap() == 42)
			passert(x:unwrap() == 10)

		## begin_test 'convertion from option(T)'

			local x: option(integer) = Some(10)
			local y: option(uinteger) = x

			passert(y:is_some() and y:unwrap() == 10_n)

			local x: option(integer) = None()
			local y: option(uinteger) = x

			passert(y:is_none())


		## begin_test 'convertion from T'

			local x: option(integer) = 10

			passert(x:is_some() and x:unwrap() == 10_i)


		## begin_test 'convertion from U'

			local x: option(integer) = 10_u

			passert(x:is_some() and x:unwrap() == 10_i)


## end