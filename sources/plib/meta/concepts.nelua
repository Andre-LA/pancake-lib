
require 'plib/meta/asserts'


--[============================================================================[
---	# FUNCTOR
--- 
--- A functor is a concept for a function returning R arguments and taking
--- Args argument.
---
--- `functor` is for 1 return value, and `functor2` is for two.
--]============================================================================]

##[[ 
local function make_functorN(R, Args)
	return concept(function(attr)
		if not attr.type.is_function then
			return false, 
				string.format("the type isn't a function (got: %s)", attr.type)
		end

		if #attr.type.rettypes ~= #R then
			return false, 
				string.format("the type doesn't have the right number of return values" ..
					"(got: %d, want: %d)", #attr.type.rettypes, #R)
		end

		for i, t in ipairs(R) do
			local ok, err = type_is(attr.type.rettypes[i], t)
			if not ok then
				return false, 
					string.format("the return type #%d does not match (got: %s, want: %s, type error: %s)", 
						i, attr.type.rettypes[i], t, err)
			end
		end

		if #attr.type.argtypes ~= #Args then
			return false, 
				string.format("the type doesn't have the right number of arguments" ..
					"(got: %d, want: %d)", #attr.type.argtypes, #Args)
		end

		for i, t in ipairs(Args) do
			local ok, err = type_is(attr.type.argtypes[i], t)
			if not ok then
				return false, 
					string.format("the argument type #%d does not match (got: %s, want: %s, typ error: %s)", 
						i, attr.type.argtypes[i], t, err)
			end
		end


		return true
	end)
end

functor_concept = generic(function(R, ...) return make_functorN({R}, {...}) end)
functor2_concept = generic(function(R1, R2, ...) return make_functorN({R1, R2}, {...}) end)

]]


global functor =  #[functor_concept]#
global functor2 = #[functor2_concept]#



--[============================================================================[
---	ACTION
---
--- An action is a function returning nothing and taking in a set of arguments.
--]============================================================================]

##[[
local make_action = generic(function(...)
	local Args = {...}

	return concept(function(attr)
		if not attr.type.is_function then
			return false, string.format("%s is not a function.", attr.type)
		end


		if #attr.type.rettypes ~= 0 then
			return false, string.format("%s shouldn't have return values.", attr.type)
		end


		if #attr.type.argtypes ~= #Args then
			return false, string.format("%s doesn't have the right number of argument (got: %d, need: %d)",
				attr.type, #attr.argtypes, #Args)
		end

		for i, t in ipairs(Args) do
			local ok, err = type_is(attr.type.argtypes[i], t)
			if not ok then
				return false, 
					string.format("the argument type #%d does not match (got: %s, want: %s, type error: %s)",
						i, attr.type.argtypes[i], t, err)
			end
		end

		return true
	end)
end)

action_concept = make_action
]]

global action = #[make_action]#
