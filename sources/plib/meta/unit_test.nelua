
## if TEST then

	##[[ 
	local cols = require('nelua.utils.console').colors



	local suite_col = cols.blue .. cols.bright
	local pipe_col = cols.white .. cols.dim
	local test_col = cols.green .. cols.bright

	local suite_name = ""
	local test_name = ""
	local suite_count = 0

	local function inject_print(content)
		inject_astnode(
			aster.Call{
				{aster.String{content}},
				aster.Id{ "print" }
			}
		)
	end



	function begin_test_suite(name)
		suite_name = name
		suite_count = 0
	end

	function begin_test(name)
		test_name = name
		suite_count = suite_count + 1

		local mark = ' '

		if suite_count == 1 then mark = "#" end

		local line = pipe_col .. mark .. cols.reset .. suite_col .. suite_name .. pipe_col .. '\t' .. test_col .. name .. cols.reset 

		inject_print(line)
	end


	local passert_dummy_concept = concept(function(x)
		local t = types.NiltypeType('niltype')
		t.is_equal = function() return false end
		t.text = cols.red .. "x=== FAIL ===x" .. cols.reset .. "\n"
		t.text = t.text .. context:get_parent_node():format_message("error", "assertion failed")
		return t
	end)
	]]

	global function passert(cond: boolean, dummy: #[passert_dummy_concept]#) <polymorphic, inline>
		if not cond then
			error(#[dummy.type.text]#)
		end
	end

## end
